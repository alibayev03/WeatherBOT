import os
import asyncio
import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from dotenv import load_dotenv
from geopy.geocoders import Nominatim
from weather import get_forecast, aggregate_daily_forecast, get_forecast_by_coords

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—è–∑—ã–∫)
user_data = {}

# –ü–µ—Ä–µ–≤–æ–¥—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
translations_ui = {
    "ru": {
        "welcome": "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã. –í—ã–±–µ—Ä–∏ —è–∑—ã–∫:",
        "lang_selected": "–í—ã–±—Ä–∞–Ω —è–∑—ã–∫: {lang_name}\n–û—Ç–ø—Ä–∞–≤—å –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏–ª–∏ –ø–æ–¥–µ–ª–∏—Å—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑.",
        "share_location": "–ü–æ–¥–µ–ª–∏—Å—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π –∏–ª–∏ –Ω–∞–ø–∏—à–∏ –≥–æ—Ä–æ–¥:",
        "fetching_city": "–ü–æ–ª—É—á–∞—é –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –¥–ª—è –≥–æ—Ä–æ–¥–∞: {city}...",
        "fetching_coords": "–ü–æ–ª—É—á–∞—é –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º (lat: {lat}, lon: {lon})...",
        "forecast_city": "–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –¥–ª—è <b>{city}</b>:\n\n",
        "error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞: {error}",
        "share_location_button": "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π",
        "temperature": "—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞",
        "forecast_line": "{date}: {description} {emoji}, {temperature}: {temp}¬∞C"
    },
    "en": {
        "welcome": "Hello! I'm a weather forecast bot. Choose a language:",
        "lang_selected": "Selected language: {lang_name}\nSend a city name or share your location to get the forecast.",
        "share_location": "Share your location or type a city name:",
        "fetching_city": "Fetching weather forecast for city: {city}...",
        "fetching_coords": "Fetching forecast for coordinates (lat: {lat}, lon: {lon})...",
        "forecast_city": "Weather forecast for <b>{city}</b>:\n\n",
        "error": "Error fetching forecast: {error}",
        "share_location_button": "Share location",
        "temperature": "temperature",
        "forecast_line": "{date}: {description} {emoji}, {temperature}: {temp}¬∞C"
    },
    "uz": {
        "welcome": "Salom! Men ob-havo prognozi botiman. Tilni tanlang:",
        "lang_selected": "Tanlangan til: {lang_name}\nShahar nomini yuboring yoki geolokatsiyani ulashing.",
        "share_location": "Geolokatsiyani ulashing yoki shahar nomini yozing:",
        "fetching_city": "Shahar uchun ob-havo prognozini olmoqda: {city}...",
        "fetching_coords": "Koordinatalar uchun prognoz olmoqda (lat: {lat}, lon: {lon})...",
        "forecast_city": "<b>{city}</b> uchun ob-havo prognozi:\n\n",
        "error": "Prognozni olishda xatolik: {error}",
        "share_location_button": "Geolokatsiyani ulashish",
        "temperature": "harorat",
        "forecast_line": "{date}: {description} {emoji}, {temperature}: {temp}¬∞C"
    }
}

# –ü–µ—Ä–µ–≤–æ–¥—ã –ø–æ–≥–æ–¥–Ω—ã—Ö –æ–ø–∏—Å–∞–Ω–∏–π –¥–ª—è —É–∑–±–µ–∫—Å–∫–æ–≥–æ
translations_weather = {
    "uz": {
        "clear sky": "Ochiq osmon",
        "few clouds": "Ozroq bulutli",
        "scattered clouds": "Tarqalgan bulutlar",
        "broken clouds": "Parcali bulutlar",
        "overcast clouds": "Bulutli",
        "light rain": "Yengil yomg‚Äòir",
        "moderate rain": "O‚Äòrtacha yomg‚Äòir",
        "heavy intensity rain": "Kuchli yomg‚Äòir",
        "light snow": "Yengil qor",
        "snow": "Qor",
        "mist": "Tuman",
        "fog": "Tuman",
        "thunderstorm": "Momaqaldiroq"
    }
}

# –≠–º–æ–¥–∑–∏ –¥–ª—è –ø–æ–≥–æ–¥–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
weather_emojis = {
    "clear sky": "‚òÄÔ∏è",
    "few clouds": "‚õÖ",
    "scattered clouds": "‚õÖ",
    "broken clouds": "‚òÅÔ∏è",
    "overcast clouds": "‚òÅÔ∏è",
    "light rain": "üåßÔ∏è",
    "moderate rain": "üåßÔ∏è",
    "heavy intensity rain": "üåßÔ∏è",
    "light snow": "‚ùÑÔ∏è",
    "snow": "‚ùÑÔ∏è",
    "mist": "üå´Ô∏è",
    "fog": "üå´Ô∏è",
    "thunderstorm": "‚õàÔ∏è",
    "ochiq osmon": "‚òÄÔ∏è",
    "ozroq bulutli": "‚õÖ",
    "tarqalgan bulutlar": "‚õÖ",
    "parcali bulutlar": "‚òÅÔ∏è",
    "bulutli": "‚òÅÔ∏è",
    "yengil yomg‚Äòir": "üåßÔ∏è",
    "o‚Äòrtacha yomg‚Äòir": "üåßÔ∏è",
    "kuchli yomg‚Äòir": "üåßÔ∏è",
    "yengil qor": "‚ùÑÔ∏è",
    "qor": "‚ùÑÔ∏è",
    "tuman": "üå´Ô∏è",
    "momaqaldiroq": "‚õàÔ∏è"
}

# –ò–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
def get_language_keyboard():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="lang_ru"),
            InlineKeyboardButton(text="üá¨üáß English", callback_data="lang_en"),
            InlineKeyboardButton(text="üá∫üáø O‚Äòzbek", callback_data="lang_uz"),
        ]
    ])
    return keyboard

@dp.message(CommandStart())
async def cmd_start(message: Message):
    user_id = message.from_user.id
    user_data[user_id] = {"lang": "ru"}  # –†—É—Å—Å–∫–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    lang = user_data[user_id]["lang"]
    await message.answer(
        translations_ui[lang]["welcome"],
        reply_markup=get_language_keyboard()
    )

@dp.callback_query(lambda c: c.data.startswith("lang_"))
async def process_language_selection(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    lang = callback.data.split("_")[1]  # ru, en, uz
    user_data[user_id]["lang"] = lang
    lang_names = {"ru": "–†—É—Å—Å–∫–∏–π", "en": "English", "uz": "O‚Äòzbek"}
    await callback.message.edit_text(
        translations_ui[lang]["lang_selected"].format(lang_name=lang_names[lang]),
        reply_markup=None
    )
    # –ó–∞–ø—Ä–æ—Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=[[types.KeyboardButton(text=translations_ui[lang]["share_location_button"], request_location=True)]],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await callback.message.answer(translations_ui[lang]["share_location"], reply_markup=keyboard)

@dp.message(lambda message: message.location)
async def handle_location(message: Message):
    user_id = message.from_user.id
    lat = message.location.latitude
    lon = message.location.longitude
    lang = user_data.get(user_id, {"lang": "ru"})["lang"]
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞
    geolocator = Nominatim(user_agent="weather_bot")
    try:
        location = geolocator.reverse((lat, lon))
        city = location.address.split(",")[1].strip() if location else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≥–æ—Ä–æ–¥"
    except:
        city = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≥–æ—Ä–æ–¥"
    await message.answer(translations_ui[lang]["fetching_coords"].format(lat=lat, lon=lon))
    try:
        forecasts = get_forecast_by_coords(lat, lon, lang)
        daily_forecasts = aggregate_daily_forecast(forecasts)
        forecast_message = translations_ui[lang]["forecast_city"].format(city=city)
        for forecast in daily_forecasts:
            date = datetime.datetime.fromtimestamp(forecast["dt"]).strftime("%d.%m.%Y")
            temp_day = forecast["main"]["temp"]
            description = forecast["weather"][0]["description"].capitalize()
            # –ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ —É–∑–±–µ–∫—Å–∫–∏–π
            if lang == "uz" and description.lower() in translations_weather["uz"]:
                description = translations_weather["uz"][description.lower()]
            emoji = weather_emojis.get(description.lower(), "üå¶Ô∏è")
            forecast_message += translations_ui[lang]["forecast_line"].format(
                date=date, description=description, emoji=emoji, temperature=translations_ui[lang]["temperature"], temp=temp_day
            ) + "\n"
        await message.answer(forecast_message, parse_mode="HTML", reply_markup=types.ReplyKeyboardRemove())
    except Exception as e:
        await message.answer(translations_ui[lang]["error"].format(error=e), reply_markup=types.ReplyKeyboardRemove())

@dp.message()
async def handle_city(message: Message):
    city = message.text.strip()
    user_id = message.from_user.id
    lang = user_data.get(user_id, {"lang": "ru"})["lang"]
    await message.answer(translations_ui[lang]["fetching_city"].format(city=city))
    try:
        forecasts = get_forecast(city, lang)
        daily_forecasts = aggregate_daily_forecast(forecasts)
        forecast_message = translations_ui[lang]["forecast_city"].format(city=city)
        for forecast in daily_forecasts:
            date = datetime.datetime.fromtimestamp(forecast["dt"]).strftime("%d.%m.%Y")
            temp_day = forecast["main"]["temp"]
            description = forecast["weather"][0]["description"].capitalize()
            # –ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ —É–∑–±–µ–∫—Å–∫–∏–π
            if lang == "uz" and description.lower() in translations_weather["uz"]:
                description = translations_weather["uz"][description.lower()]
            emoji = weather_emojis.get(description.lower(), "üå¶Ô∏è")
            forecast_message += translations_ui[lang]["forecast_line"].format(
                date=date, description=description, emoji=emoji, temperature=translations_ui[lang]["temperature"], temp=temp_day
            ) + "\n"
        await message.answer(forecast_message, parse_mode="HTML", reply_markup=types.ReplyKeyboardRemove())
    except Exception as e:
        await message.answer(translations_ui[lang]["error"].format(error=e), reply_markup=types.ReplyKeyboardRemove())

async def main():
    try:
        await dp.start_polling(bot)
    finally:
        await bot.session.close()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("Bot stopped")